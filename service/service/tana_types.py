# Generated by https://quicktype.io
#
# To change quicktype's target language, run command:
#
#   "Set quicktype target language"

from enum import Enum
from pydantic import BaseModel, Field, ConfigDict
from typing import Optional, Union, List, Dict, Any


class Props(BaseModel):
  created: int
  name: str = ''
  description: Optional[str] = None
  ownerId: Optional[str] = Field(default=None, alias='_ownerId')
  metaNodeId: Optional[str] = Field(default=None, alias='_metaNodeId')
  docType: Optional[str] = Field(default=None, alias='_docType')
  sourceId: Optional[str] = Field(default=None, alias='_sourceId')
  view: Optional[str] = None
  editMode: Optional[bool] = False
  done: Optional[Union[bool, int, None]] = None


class NodeDump(BaseModel):
  id: str
  props: Props
  touchCounts: Optional[List[int]] = None
  modifiedTs: Optional[List[int]] = None
  children: Optional[List[str]] = None
  associationMap: Optional[Dict[str, str]] = None
  underConstruction: Optional[bool] = None
  inbound_refs: Optional[List[str]] = []
  outbound_refs: Optional[List[str]] = []
  color: Optional[str] = None
  tags: List[str] = []
  content: List[str] = []
  fields:List[str] = []
  

# config for graph visualization.
# By default, we inlucde all linkages
class Visualizer(BaseModel):
  include_tag_tag_links: bool = True
  include_node_tag_links: bool = True
  include_inline_refs: bool = True
  include_inline_ref_nodes: bool = True
  include_content_nodes: bool = False
  
  # make this hashable
  model_config = ConfigDict(frozen = True)


class TanaDump(BaseModel):
  formatVersion: int
  docs: List[NodeDump]
  editors: List[List[Union[int, str]]]
  workspaces: Dict[str, str]
  lastTxid: Optional[int] = None
  lastFbKey: Optional[str] = None
  optimisticTransIds: Optional[List[Any]] = None
  currentWorkspaceId: Optional[str] = None

  visualize: Optional[Visualizer] = None

